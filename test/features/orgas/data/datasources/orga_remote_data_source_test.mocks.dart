// Mocks generated by Mockito 5.3.2 from annotations
// in lomba_frontend/test/features/orgas/data/datasources/orga_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:http/http.dart' as _i2;
import 'package:lomba_frontend/core/data/datasources/local_data_source.dart'
    as _i3;
import 'package:lomba_frontend/features/orgas/data/datasources/orga_remote_data_source.dart'
    as _i6;
import 'package:lomba_frontend/features/orgas/data/models/orga_model.dart'
    as _i4;
import 'package:lomba_frontend/features/orgas/data/models/orgauser_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalDataSource_1 extends _i1.SmartFake
    implements _i3.LocalDataSource {
  _FakeLocalDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrgaModel_2 extends _i1.SmartFake implements _i4.OrgaModel {
  _FakeOrgaModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrgaUserModel_3 extends _i1.SmartFake implements _i5.OrgaUserModel {
  _FakeOrgaUserModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrgaRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrgaRemoteDataSourceImpl extends _i1.Mock
    implements _i6.OrgaRemoteDataSourceImpl {
  MockOrgaRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  _i3.LocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i3.LocalDataSource);
  @override
  _i7.Future<List<_i4.OrgaModel>> getOrgas(
    String? filter,
    String? fieldOrder,
    double? pageNumber,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrgas,
          [
            filter,
            fieldOrder,
            pageNumber,
            pageSize,
          ],
        ),
        returnValue: _i7.Future<List<_i4.OrgaModel>>.value(<_i4.OrgaModel>[]),
      ) as _i7.Future<List<_i4.OrgaModel>>);
  @override
  _i7.Future<_i4.OrgaModel> getOrga(String? orgaId) => (super.noSuchMethod(
        Invocation.method(
          #getOrga,
          [orgaId],
        ),
        returnValue: _i7.Future<_i4.OrgaModel>.value(_FakeOrgaModel_2(
          this,
          Invocation.method(
            #getOrga,
            [orgaId],
          ),
        )),
      ) as _i7.Future<_i4.OrgaModel>);
  @override
  _i7.Future<_i4.OrgaModel?> existsOrga(
    String? orgaId,
    String? code,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #existsOrga,
          [
            orgaId,
            code,
          ],
        ),
        returnValue: _i7.Future<_i4.OrgaModel?>.value(),
      ) as _i7.Future<_i4.OrgaModel?>);
  @override
  _i7.Future<List<_i5.OrgaUserModel>> getOrgaUsers(String? orgaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrgaUsers,
          [orgaId],
        ),
        returnValue:
            _i7.Future<List<_i5.OrgaUserModel>>.value(<_i5.OrgaUserModel>[]),
      ) as _i7.Future<List<_i5.OrgaUserModel>>);
  @override
  _i7.Future<List<_i5.OrgaUserModel>> getOrgaUser(
    String? orgaId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrgaUser,
          [
            orgaId,
            userId,
          ],
        ),
        returnValue:
            _i7.Future<List<_i5.OrgaUserModel>>.value(<_i5.OrgaUserModel>[]),
      ) as _i7.Future<List<_i5.OrgaUserModel>>);
  @override
  _i7.Future<_i4.OrgaModel> addOrga(_i4.OrgaModel? orga) => (super.noSuchMethod(
        Invocation.method(
          #addOrga,
          [orga],
        ),
        returnValue: _i7.Future<_i4.OrgaModel>.value(_FakeOrgaModel_2(
          this,
          Invocation.method(
            #addOrga,
            [orga],
          ),
        )),
      ) as _i7.Future<_i4.OrgaModel>);
  @override
  _i7.Future<_i5.OrgaUserModel> addOrgaUser(_i5.OrgaUserModel? orgaUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrgaUser,
          [orgaUser],
        ),
        returnValue: _i7.Future<_i5.OrgaUserModel>.value(_FakeOrgaUserModel_3(
          this,
          Invocation.method(
            #addOrgaUser,
            [orgaUser],
          ),
        )),
      ) as _i7.Future<_i5.OrgaUserModel>);
  @override
  _i7.Future<bool> deleteOrga(String? orgaId) => (super.noSuchMethod(
        Invocation.method(
          #deleteOrga,
          [orgaId],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> deleteOrgaUser(
    String? orgaId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOrgaUser,
          [
            orgaId,
            userId,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> enableOrga(
    String? orgaId,
    bool? enableOrDisable,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableOrga,
          [
            orgaId,
            enableOrDisable,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> enableOrgaUser(
    String? orgaId,
    String? userId,
    bool? enableOrDisable,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableOrgaUser,
          [
            orgaId,
            userId,
            enableOrDisable,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<_i4.OrgaModel> updateOrga(
    String? orgaId,
    _i4.OrgaModel? orga,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrga,
          [
            orgaId,
            orga,
          ],
        ),
        returnValue: _i7.Future<_i4.OrgaModel>.value(_FakeOrgaModel_2(
          this,
          Invocation.method(
            #updateOrga,
            [
              orgaId,
              orga,
            ],
          ),
        )),
      ) as _i7.Future<_i4.OrgaModel>);
  @override
  _i7.Future<_i5.OrgaUserModel> updateOrgaUser(
    String? orgaId,
    String? userId,
    _i5.OrgaUserModel? orgaUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgaUser,
          [
            orgaId,
            userId,
            orgaUser,
          ],
        ),
        returnValue: _i7.Future<_i5.OrgaUserModel>.value(_FakeOrgaUserModel_3(
          this,
          Invocation.method(
            #updateOrgaUser,
            [
              orgaId,
              userId,
              orgaUser,
            ],
          ),
        )),
      ) as _i7.Future<_i5.OrgaUserModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i7.Future<_i9.Uint8List>);
  @override
  _i7.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i2.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
