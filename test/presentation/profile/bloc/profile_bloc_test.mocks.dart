// Mocks generated by Mockito 5.3.2 from annotations
// in lomba_frontend/test/presentation/profile/bloc/profile_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:lomba_frontend/core/failures.dart' as _i7;
import 'package:lomba_frontend/data/models/session_model.dart' as _i10;
import 'package:lomba_frontend/domain/entities/user.dart' as _i8;
import 'package:lomba_frontend/domain/repositories/local_repository.dart'
    as _i4;
import 'package:lomba_frontend/domain/repositories/user_repository.dart' as _i2;
import 'package:lomba_frontend/domain/usecases/local/get_session_status.dart'
    as _i9;
import 'package:lomba_frontend/domain/usecases/users/exists_profile.dart'
    as _i12;
import 'package:lomba_frontend/domain/usecases/users/get_user.dart' as _i5;
import 'package:lomba_frontend/domain/usecases/users/update_profile.dart'
    as _i11;
import 'package:lomba_frontend/domain/usecases/users/update_profile_password.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalRepository_2 extends _i1.SmartFake
    implements _i4.LocalRepository {
  _FakeLocalRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUser extends _i1.Mock implements _i5.GetUser {
  MockGetUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.User>> execute(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [userId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.User>>.value(
            _FakeEither_1<_i7.Failure, _i8.User>(
          this,
          Invocation.method(
            #execute,
            [userId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.User>>);
}

/// A class which mocks [GetSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSession extends _i1.Mock implements _i9.GetSession {
  MockGetSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LocalRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLocalRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LocalRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i10.SessionModel>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i10.SessionModel>>.value(
                _FakeEither_1<_i7.Failure, _i10.SessionModel>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i10.SessionModel>>);
}

/// A class which mocks [UpdateProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfile extends _i1.Mock implements _i11.UpdateProfile {
  MockUpdateProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.User>> execute(
    String? userId,
    _i8.User? user,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            userId,
            user,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.User>>.value(
            _FakeEither_1<_i7.Failure, _i8.User>(
          this,
          Invocation.method(
            #execute,
            [
              userId,
              user,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.User>>);
}

/// A class which mocks [ExistsProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockExistsProfile extends _i1.Mock implements _i12.ExistsProfile {
  MockExistsProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.User?>> execute(
    String? userId,
    String? username,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            userId,
            username,
            email,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.User?>>.value(
            _FakeEither_1<_i7.Failure, _i8.User?>(
          this,
          Invocation.method(
            #execute,
            [
              userId,
              username,
              email,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.User?>>);
}

/// A class which mocks [UpdateProfilePassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfilePassword extends _i1.Mock
    implements _i13.UpdateProfilePassword {
  MockUpdateProfilePassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> execute(
    String? userId,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            userId,
            password,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [
              userId,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
