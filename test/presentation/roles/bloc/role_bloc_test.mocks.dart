// Mocks generated by Mockito 5.3.2 from annotations
// in lomba_frontend/test/presentation/roles/bloc/role_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:lomba_frontend/core/failures.dart' as _i6;
import 'package:lomba_frontend/domain/entities/role.dart' as _i7;
import 'package:lomba_frontend/domain/repositories/role_repository.dart' as _i2;
import 'package:lomba_frontend/domain/usecases/roles/enable_role.dart' as _i4;
import 'package:lomba_frontend/domain/usecases/roles/get_role.dart' as _i8;
import 'package:lomba_frontend/domain/usecases/roles/get_roles.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRoleRepository_0 extends _i1.SmartFake
    implements _i2.RoleRepository {
  _FakeRoleRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EnableRole].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnableRole extends _i1.Mock implements _i4.EnableRole {
  @override
  _i2.RoleRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.RoleRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Role>> execute(
    String? name,
    bool? enableOrDisable,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            name,
            enableOrDisable,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>.value(
            _FakeEither_1<_i6.Failure, _i7.Role>(
          this,
          Invocation.method(
            #execute,
            [
              name,
              enableOrDisable,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>.value(
                _FakeEither_1<_i6.Failure, _i7.Role>(
          this,
          Invocation.method(
            #execute,
            [
              name,
              enableOrDisable,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>);
}

/// A class which mocks [GetRole].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRole extends _i1.Mock implements _i8.GetRole {
  @override
  _i2.RoleRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.RoleRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Role>> execute(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [name],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>.value(
            _FakeEither_1<_i6.Failure, _i7.Role>(
          this,
          Invocation.method(
            #execute,
            [name],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>.value(
                _FakeEither_1<_i6.Failure, _i7.Role>(
          this,
          Invocation.method(
            #execute,
            [name],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Role>>);
}

/// A class which mocks [GetRoles].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRoles extends _i1.Mock implements _i9.GetRoles {
  @override
  _i2.RoleRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeRoleRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.RoleRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Role>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Role>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Role>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Role>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Role>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Role>>>);
}
