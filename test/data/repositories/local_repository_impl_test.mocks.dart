// Mocks generated by Mockito 5.3.2 from annotations
// in lomba_frontend/test/data/repositories/local_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:lomba_frontend/data/datasources/local_data_source.dart' as _i4;
import 'package:lomba_frontend/data/models/session_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSessionModel_1 extends _i1.SmartFake implements _i3.SessionModel {
  _FakeSessionModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSourceImpl extends _i1.Mock
    implements _i4.LocalDataSourceImpl {
  MockLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i2.SharedPreferences);
  @override
  _i5.Future<_i3.SessionModel> getSavedSession() => (super.noSuchMethod(
        Invocation.method(
          #getSavedSession,
          [],
        ),
        returnValue: _i5.Future<_i3.SessionModel>.value(_FakeSessionModel_1(
          this,
          Invocation.method(
            #getSavedSession,
            [],
          ),
        )),
      ) as _i5.Future<_i3.SessionModel>);
  @override
  _i5.Future<bool> cleanSession() => (super.noSuchMethod(
        Invocation.method(
          #cleanSession,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> saveSession(_i3.SessionModel? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> hasSession() => (super.noSuchMethod(
        Invocation.method(
          #hasSession,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
